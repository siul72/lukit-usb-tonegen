#include "generator/square_tonegen.h"

// Square Wave is generated by adding odd-numbered harmonics with decreasing amplitude https://youtu.be/YsZKvLnf7wU?t=363
double SquareWaveGenerator::generate(int fundamentalFrequencyHz, double timeIndexSeconds, double durationSeconds)
{
    double firstHarmonicPeriodSeconds = 1.0 / fundamentalFrequencyHz;
    double firstHarmonicRadians = timeIndexSeconds / firstHarmonicPeriodSeconds * (2 * M_PI);

    double thirdHarmonicPeriodSeconds = 1.0 / (fundamentalFrequencyHz * 3);
    double thirdHarmonicRadians = timeIndexSeconds / thirdHarmonicPeriodSeconds * (2 * M_PI);
    double thirdHarmonicAmplitude = 1.0 / 3.0;

    double fifthHarmonicPeriodSeconds = 1.0 / (fundamentalFrequencyHz * 5);
    double fifthHarmonicRadians = timeIndexSeconds / fifthHarmonicPeriodSeconds * (2 * M_PI);
    double fifthHarmonicAmplitude = 1.0 / 5.0;

    double seventhHarmonicPeriodSeconds = 1.0 / (fundamentalFrequencyHz * 7);
    double seventhHarmonicRadians = timeIndexSeconds / seventhHarmonicPeriodSeconds * (2 * M_PI);
    double seventhHarmonicAmplitude = 1.0 / 7.0;

    double ninthHarmonicPeriodSeconds = 1.0 / (fundamentalFrequencyHz * 9);
    double ninthHarmonicRadians = timeIndexSeconds / ninthHarmonicPeriodSeconds * (2 * M_PI);
    double ninthHarmonicAmplitude = 1.0 / 9.0;

    // ... continue to infinite

    double result = sin(firstHarmonicRadians) \
                  + thirdHarmonicAmplitude   * sin(thirdHarmonicRadians) \
                  + fifthHarmonicAmplitude   * sin(fifthHarmonicRadians) \
                  + seventhHarmonicAmplitude * sin(seventhHarmonicRadians) \
                  + ninthHarmonicAmplitude   * sin(ninthHarmonicRadians);

    return result;
}
 